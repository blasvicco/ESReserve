imports:
    - { resource: parameters.yml }
    - { resource: security.yml }
    - { resource: services.yml }
    - { resource: "@ApiBundle/Resources/config/services.yml" }

# Put parameters here that don't need to change on each machine where the app is deployed
# http://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: en

framework:
    #esi:             ~
    #translator:      { fallbacks: ["%locale%"] }
    secret:          "%secret%"
    router:
        resource: "%kernel.root_dir%/config/routing.yml"
        strict_requirements: ~
    form:            ~
    csrf_protection: ~
    validation:      { enable_annotations: true }
    #serializer:      { enable_annotations: true }
    templating:
        engines: ['twig']
    default_locale:  "%locale%"
    trusted_hosts:   ~
    trusted_proxies: ~
    session:
        # handler_id set to null will use default session handler from php.ini
        handler_id:  ~
    fragments:       ~
    http_method_override: true

# Twig Configuration
twig:
    debug:            "%kernel.debug%"
    strict_variables: "%kernel.debug%"

# Doctrine Configuration
doctrine:
    dbal:
        driver:   pdo_mysql
        host:     "%database_host%"
        port:     "%database_port%"
        dbname:   "%database_name%"
        user:     "%database_user%"
        password: "%database_password%"
        charset:  UTF8
        # if using pdo_sqlite as your database driver:
        #   1. add the path in parameters.yml
        #     e.g. database_path: "%kernel.root_dir%/data/data.db3"
        #   2. Uncomment database_path in parameters.yml.dist
        #   3. Uncomment next line:
        #     path:     "%database_path%"

    orm:
        dql:
            datetime_functions:
                str_to_date: DoctrineExtensions\Query\Mysql\StrToDate
        auto_generate_proxy_classes: "%kernel.debug%"
        #naming_strategy: doctrine.orm.naming_strategy.underscore
        auto_mapping: true
        mappings:
            ApiBundle:
                    type: annotation
                    dir: '%kernel.root_dir%/../src/ApiBundle/Entity'
                    is_bundle: false
                    prefix: ApiBundle\Entity

# Swiftmailer Configuration
swiftmailer:
    transport: "%mailer_transport%"
    host:      "%mailer_host%"
    username:  "%mailer_user%"
    password:  "%mailer_password%"
    spool:     { type: memory }

# Extra bundles for handle APIs
nelmio_api_doc: ~

fos_rest:
    routing_loader:
        default_format: json
        include_format: true
    param_fetcher_listener: force
    body_listener:
        array_normalizer:
            forms: true
    allowed_methods_listener: true
    view:
        view_response_listener: 'force'
        formats:
            json: true
            xml: true
    format_listener:
        rules:
            - { path: '^/api/', priorities: ['json'], fallback_format: json, prefer_extension: true }
            - { path: '^/getToken', priorities: ['json'], fallback_format: json, prefer_extension: true }

sensio_framework_extra:
    view:    { annotations: false }
    router:  { annotations: true }

fos_user:
    db_driver: orm
    firewall_name: api                                  # Seems to be used when registering user/reseting password,
                                                        # but since there is no "login", as so it seems to be useless in
                                                        # our particular context, but still required by "FOSUserBundle"
    user_class: ApiBundle\Entity\User

fos_oauth_server:
    db_driver:           orm
    client_class:        ApiBundle\Entity\Client
    access_token_class:  ApiBundle\Entity\AccessToken
    refresh_token_class: ApiBundle\Entity\RefreshToken
    auth_code_class:     ApiBundle\Entity\AuthCode
    service:
        user_provider: fos_user.user_manager
        
liip_imagine:
    filter_sets:
        logo_filter:
            format: jpeg
            filters:
                strip: ~
                thumbnail: { size: [100, 100], mode: inset }
        thumbs_filter:
            format: jpeg
            filters:
                strip: ~
                thumbnail: { size: [30, 30], mode: inset }
